"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[670],{7534:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"usage/frontend-crud","title":"Image CRUD on the Frontend","description":"Pixstore automatically creates and manages an IndexedDB table for image caching in the browser.","source":"@site/docs/usage/frontend-crud.md","sourceDirName":"usage","slug":"/usage/frontend-crud","permalink":"/pixstore/docs/usage/frontend-crud","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/pixstore/tree/main/docusaurus/docs/usage/frontend-crud.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"frontend-crud","title":"Image CRUD on the Frontend","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Image CRUD on the Backend","permalink":"/pixstore/docs/usage/backend-crud"},"next":{"title":"Backend \u2194 Frontend Integration","permalink":"/pixstore/docs/usage/integration"}}');var a=r(4848),o=r(8453);const i={id:"frontend-crud",title:"Image CRUD on the Frontend",sidebar_position:3},s=void 0,c={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Reading and caching an image",id:"reading-and-caching-an-image",level:2},{value:"Deleting a cached image",id:"deleting-a-cached-image",level:2},{value:"Checking if a cached image exists",id:"checking-if-a-cached-image-exists",level:2},{value:"What does Pixstore automate for you",id:"what-does-pixstore-automate-for-you",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Pixstore automatically creates and manages an IndexedDB table for image caching in the browser.\nYou do not need to set up or initialize any storage manually."}),"\n",(0,a.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,a.jsx)(n.p,{children:"Pixstore handles all frontend image cache management for you."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["When you use ",(0,a.jsx)(n.code,{children:"getImage"}),", Pixstore fetches and decrypts the image from the backend (if needed), then caches it in IndexedDB as decrypted (without the key) for fast future access."]}),"\n",(0,a.jsx)(n.li,{children:"No encryption keys or sensitive data are ever written to IndexedDB. All decryption is performed only in memory."}),"\n",(0,a.jsx)(n.li,{children:"Cached images are validated with tokens to ensure you never use stale or out-of-date content."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"When you remove an image from the frontend cache:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The cached record is deleted from IndexedDB."}),"\n",(0,a.jsxs)(n.li,{children:["If you created any Blob URLs from this image, you are responsible for revoking them using ",(0,a.jsx)(n.code,{children:"URL.revokeObjectURL(url)"})," when they are no longer needed."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"All these actions are performed automatically. You never interact with IndexedDB or low-level browser storage directly."}),"\n",(0,a.jsx)(n.h2,{id:"reading-and-caching-an-image",children:"Reading and caching an image"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { getImage } from 'pixstore/frontend'\nimport { getLastPixstoreError } from 'pixstore/shared'\n\nconst blob = await getImage(imageRecord)\nif (blob) {\n  const url = URL.createObjectURL(blob)\n  // Use this url in <img src={url}> or anywhere in your UI\n} else {\n  // Image is not available\n  console.error(getLastPixstoreError())\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pixstore handles fetching, decryption, and caching for you.\nYou only deal with Blob objects."}),"\n",(0,a.jsx)(n.h2,{id:"deleting-a-cached-image",children:"Deleting a cached image"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { deleteCachedImage } from 'pixstore/frontend'\nimport { getLastPixstoreError } from 'pixstore/shared'\n\nconst success = await deleteCachedImage(imageId)\n\nif (success === null) {\n  // Unexpected error occurred\n  console.error(getLastPixstoreError())\n} else if (success) {\n  // Image removed from cache\n} else {\n  // Image was not found in cache\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pixstore removes the image from the cache and releases resources.\nNo IndexedDB code is needed."}),"\n",(0,a.jsx)(n.h2,{id:"checking-if-a-cached-image-exists",children:"Checking if a cached image exists"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { cachedImageExists } from 'pixstore/frontend'\nimport { getLastPixstoreError } from 'pixstore/shared'\n\nconst exists = await cachedImageExists(imageId)\n\nif (exists === null) {\n  // Unexpected error occurred\n  console.error(getLastPixstoreError())\n} else if (exists) {\n  // Image is available locally\n} else {\n  // Image is not cached\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"what-does-pixstore-automate-for-you",children:"What does Pixstore automate for you"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Automatic creation and management of IndexedDB image cache"}),"\n",(0,a.jsx)(n.li,{children:"Secure cache with token-based validation, always in sync with backend"}),"\n",(0,a.jsx)(n.li,{children:"No encryption keys or secrets are stored in the browser cache"}),"\n",(0,a.jsx)(n.li,{children:"Consistent cleanup and cache updates on every operation"}),"\n",(0,a.jsx)(n.li,{children:"All storage and cryptography logic handled behind the scenes"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Just call the CRUD methods. Pixstore manages the rest."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["For detailed technical information, see the ",(0,a.jsx)(n.a,{href:"../api-reference/frontend/image-service",children:"API Reference section"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(6540);const a={},o=t.createContext(a);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);