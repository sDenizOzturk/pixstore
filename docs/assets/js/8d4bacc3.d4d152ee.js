"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[523],{2883:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"reference/types","title":"Shared Types","description":"This page documents the shared type definitions used across Pixstore frontend and backend.","source":"@site/docs/reference/types.md","sourceDirName":"reference","slug":"/reference/types","permalink":"/pixstore/docs/reference/types","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/pixstore/tree/main/docusaurus/docs/reference/types.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"types","title":"Shared Types","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Image Service","permalink":"/pixstore/docs/reference/frontend/image-service"}}');var i=t(4848),s=t(8453),d=t(3141);const o={id:"types",title:"Shared Types",sidebar_position:3},c="Shared Types",a={},h=[{value:"<code>ImageRecord</code>",id:"imagerecord",level:2},{value:"Definition",id:"definition",level:3},{value:"Fields",id:"fields",level:3},{value:"How it works?",id:"how-it-works",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"shared-types",children:"Shared Types"})}),"\n",(0,i.jsx)(n.p,{children:"This page documents the shared type definitions used across Pixstore frontend and backend."}),"\n",(0,i.jsxs)(n.p,{children:["All types on this page are exported from the main ",(0,i.jsx)(n.code,{children:"pixstore"})," entrypoint:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import type { ImageRecord } from 'pixstore'\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"imagerecord",children:(0,i.jsx)(n.code,{children:"ImageRecord"})}),"\n",(0,i.jsx)(n.p,{children:"Represents a reference to an image stored in Pixstore, including the ID, access token, and decryption metadata."}),"\n",(0,i.jsx)(n.p,{children:"Used to fetch and decrypt images on the frontend."}),"\n",(0,i.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ImageRecord {\n  id: string\n  token: number\n  meta: ImageDecryptionMeta\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fields",children:"Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Unique identifier of the image"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"token"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:"Used for cache validation and versioning"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"meta"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ImageDecryptionMeta"})}),(0,i.jsx)(n.td,{children:"Decryption metadata: key, IV, tag, format, etc."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works",children:"How it works?"}),"\n",(0,i.jsx)(d.A,{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Metadata required to decrypt an encrypted image\nexport interface ImageDecryptionMeta {\n  key: string // Base64-encoded AES-GCM encryption key\n  iv: string // Initialization vector (IV) for AES-GCM, base64-encoded\n  tag: string // Authentication tag for AES-GCM, base64-encoded\n}\n\n// Reference object representing an image in Pixstore\nexport interface ImageRecord {\n  id: string // Unique ID used to locate and identify the image\n  token: number // Used for cache validation and version control\n  meta: ImageDecryptionMeta // Metadata required to decrypt the image\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc4 Source: ",(0,i.jsx)(n.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/types/image-record.ts",children:(0,i.jsx)(n.code,{children:"src/types/image-record.ts"})})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},3141:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var r=t(4848);const i=()=>(0,r.jsxs)("div",{style:{backgroundColor:"#fff4e5",padding:"1em",borderLeft:"4px solid #f5a623",marginBottom:"1em",borderRadius:"4px",fontSize:"0.8em",lineHeight:"1.4",color:"#333"},children:[(0,r.jsx)("strong",{children:"\u26a0\ufe0f This section shows internal implementation details."}),(0,r.jsx)("br",{}),"It is intended for contributors or users who want to understand the inner workings of Pixstore.",(0,r.jsx)("br",{}),"Typical users do not need to modify or interact with this code directly."]})},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function d(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);