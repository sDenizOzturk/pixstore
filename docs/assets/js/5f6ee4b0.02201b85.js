"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[600],{3141:(e,r,n)=>{n.d(r,{A:()=>t});n(6540);var o=n(4848);const s=n(8330).WD||" ",t=()=>(0,o.jsxs)("div",{style:{backgroundColor:"#fff4e5",padding:"1em",borderLeft:"4px solid #f5a623",marginBottom:"1em",borderRadius:"4px",fontSize:"0.8em",lineHeight:"1.4",color:"#333"},children:[(0,o.jsx)("strong",{children:"\u26a0\ufe0f This section shows internal implementation details."}),(0,o.jsx)("br",{}),"It is intended for contributors or users who want to understand the inner workings of Pixstore. Typical users do not need to modify or interact with this code directly.",(0,o.jsx)("br",{}),(0,o.jsxs)("em",{children:["Also, this code was last verified with",(0,o.jsxs)("b",{children:[" Pixstore v",s]})," and may change in future versions. For the latest implementation, always check the official repository at"," ",(0,o.jsx)("a",{href:"https://github.com/sDenizOzturk/pixstore",target:"_blank",rel:"noopener noreferrer",children:"github.com/sDenizOzturk/pixstore"}),"."]})]})},8330:e=>{e.exports={WD:"3.2.1"}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>d});var o=n(6540);const s={},t=o.createContext(s);function i(e){const r=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(t.Provider,{value:r},e.children)}},9155:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>x,frontMatter:()=>d,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api-reference/shared-module","title":"Shared Modules","description":"This page documents the shared modules used across Pixstore frontend and backend.","source":"@site/docs/api-reference/shared.md","sourceDirName":"api-reference","slug":"/api-reference/shared-module","permalink":"/pixstore/docs/api-reference/shared-module","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/pixstore/tree/main/docusaurus/docs/api-reference/shared.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"shared-module","title":"Shared Modules","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Image Service","permalink":"/pixstore/docs/api-reference/frontend/image-service"},"next":{"title":"Types","permalink":"/pixstore/docs/api-reference/types"}}');var s=n(4848),t=n(8453),i=n(3141);const d={id:"shared-module",title:"Shared Modules",sidebar_position:3},a=void 0,l={},c=[{value:"<code>setCustomErrorHandler</code>",id:"setcustomerrorhandler",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3},{value:"How it works?",id:"how-it-works",level:3},{value:"<code>getLastPixstoreError</code>",id:"getlastpixstoreerror",level:2},{value:"Description",id:"description-1",level:3},{value:"Example",id:"example-1",level:3},{value:"How it works?",id:"how-it-works-1",level:3}];function h(e){const r={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"This page documents the shared modules used across Pixstore frontend and backend."}),"\n",(0,s.jsxs)(r.p,{children:["All exports listed here are available from the main ",(0,s.jsx)(r.code,{children:"pixstore/shared"})," entrypoint:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"import { setCustomErrorHandler, getLastPixstoreError } from 'pixstore/shared'\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"setcustomerrorhandler",children:(0,s.jsx)(r.code,{children:"setCustomErrorHandler"})}),"\n",(0,s.jsx)(r.p,{children:"Registers a custom error handler function for all Pixstore API calls, affecting both frontend and backend modules."}),"\n",(0,s.jsxs)(r.p,{children:["When ",(0,s.jsx)(r.code,{children:"errorHandlingMode"})," is set to ",(0,s.jsx)(r.code,{children:"'custom'"}),", your handler will be called on every error (sync or async) thrown by Pixstore, instead of throwing or logging."]}),"\n",(0,s.jsx)(r.p,{children:"This allows you to integrate with your own logging, alerting, or error tracking systems, or to gracefully handle specific Pixstore errors."}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"export const setCustomErrorHandler = (handler: (error: unknown) => void) => void\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"handler"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"(error: unknown) => void"})}),(0,s.jsx)(r.td,{children:"Custom error handler to call when errors occur."})]})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"/**\n * Example: Write all Pixstore errors to a log file (custom logging integration)\n */\nimport fs from 'fs'\nimport { setCustomErrorHandler } from 'pixstore/shared'\n\n// Register a global Pixstore error handler that writes every error to disk\nsetCustomErrorHandler((err) => {\n  // Format error with timestamp and message\n  const message = `[${new Date().toISOString()}] Pixstore error: ${String(err)}\\n`\n  // Append the error to a log file (sync for demo/demo purposes)\n  fs.appendFileSync('pixstore-errors.log', message)\n})\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"how-it-works",children:"How it works?"}),"\n",(0,s.jsx)(i.A,{}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"/**\n * Stores the current Pixstore custom error handler function.\n * Used when errorHandlingMode is set to 'custom'.\n */\nlet customErrorHandler: CustomErrorHandler | undefined\n\n/**\n * Registers a custom error handler for Pixstore error handling.\n * Used only if errorHandlingMode is set to 'custom'.\n */\nexport const setCustomErrorHandler = (\n  newErrorHandler: CustomErrorHandler | undefined,\n) => {\n  // Store the user-provided error handler for centralized error processing\n  customErrorHandler = newErrorHandler\n}\n\n/// <Inside the handleCatch>\nelse if (ERROR_HANDLING_MODE === 'custom') {\n    if (customErrorHandler) {\n      customErrorHandler(error)\n      return null\n    }\n    // No custom handler set: this is a critical config error\n    throw new Error('Custom error handler is not set')\n  }\n/// </ Inside the handleCatch>\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"getlastpixstoreerror",children:(0,s.jsx)(r.code,{children:"getLastPixstoreError"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns the ",(0,s.jsx)(r.strong,{children:"most recent"})," ",(0,s.jsx)(r.code,{children:"PixstoreError"})," handled by the API.\nIf no error has occurred, returns ",(0,s.jsx)(r.code,{children:"null"}),".\nUse this for debugging, advanced error reporting, or to provide more detail when a Pixstore function returns ",(0,s.jsx)(r.code,{children:"null"})," or ",(0,s.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"description-1",children:"Description"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"export const getLastPixstoreError = (): PixstoreError | null\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Note:"}),"\nThe ",(0,s.jsx)(r.code,{children:"getLastPixstoreError()"})," function is only updated when ",(0,s.jsx)(r.code,{children:"errorHandlingMode"})," is set to ",(0,s.jsx)(r.code,{children:"'hybrid'"})," (the default) and when the error is an instance of ",(0,s.jsx)(r.code,{children:"PixstoreError"}),".\nFor all other error handling modes, or for non-Pixstore errors, this function will not be updated."]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"import { getImageRecord } from 'pixstore/backend'\nimport { getLastPixstoreError } from 'pixstore/shared'\n\nconst record = getImageRecord('image-123')\nif (!record) {\n  // Access the last error for detailed diagnostics\n  const lastError = getLastPixstoreError()\n  console.error('Pixstore error:', lastError)\n}\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"how-it-works-1",children:"How it works?"}),"\n",(0,s.jsx)(i.A,{}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"/**\n * Returns the most recent PixstoreError handled by the API.\n * Resets only when a new error is handled.\n * For debugging, logging, and advanced error reporting.\n */\nexport const getLastPixstoreError = (): PixstoreError | null => {\n  return _lastPixstoreError\n}\n\n/// <Inside the handleCatch>\nif (ERROR_HANDLING_MODE === 'hybrid') {\n  if (error instanceof PixstoreError) {\n    // Set last PixstoreError\n    _lastPixstoreError = error\n    // Log PixstoreError as warning and return null\n    console.warn(error)\n    return null\n  } else {\n    // For all non-Pixstore errors, always throw\n    throw error\n  }\n}\n/// </ Inside the handleCatch>\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.p,{children:["\ud83d\udcc4 Source: ",(0,s.jsx)(r.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/shared/handle-error.js",children:(0,s.jsx)(r.code,{children:"src/shared/handle-error.js"})})]})]})}function x(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);