"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[519],{7420:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"usage/error-handling","title":"Error Handling","description":"Pixstore allows you to configure how errors are handled during all API operations (both frontend and backend).","source":"@site/docs/usage/error-handling.md","sourceDirName":"usage","slug":"/usage/error-handling","permalink":"/pixstore/docs/usage/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/pixstore/tree/main/docusaurus/docs/usage/error-handling.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"error-handling","title":"Error Handling","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Automatic Cache Cleanup","permalink":"/pixstore/docs/usage/cache-cleanup"},"next":{"title":"API Reference","permalink":"/pixstore/docs/category/api-reference"}}');var s=n(4848),t=n(8453);const d={id:"error-handling",title:"Error Handling",sidebar_position:8},i=void 0,l={},a=[{value:"Available Modes",id:"available-modes",level:2},{value:"Example 1: <code>throw</code> mode with try/catch",id:"example-1-throw-mode-with-trycatch",level:2},{value:"Example 2: <code>hybrid</code> mode with getLastPixstoreError()",id:"example-2-hybrid-mode-with-getlastpixstoreerror",level:2},{value:"Example 3: <code>custom</code> mode with a custom handler",id:"example-3-custom-mode-with-a-custom-handler",level:2}];function c(e){const r={a:"a",blockquote:"blockquote",br:"br",code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["Pixstore allows you to configure how errors are handled during all API operations (both frontend and backend).",(0,s.jsx)(r.br,{}),"\n","This is controlled by the ",(0,s.jsx)(r.a,{href:"/docs/api-reference/types#errorhandlingmode",children:(0,s.jsx)(r.code,{children:"errorHandlingMode"})})," option passed to\n",(0,s.jsx)(r.a,{href:"/docs/api-reference/frontend/initialization",children:(0,s.jsx)(r.code,{children:"initPixstoreFrontend"})})," or\n",(0,s.jsx)(r.a,{href:"/docs/api-reference/backend/initialization",children:(0,s.jsx)(r.code,{children:"initPixstoreBackend"})}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"available-modes",children:"Available Modes"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Mode"}),(0,s.jsx)(r.th,{children:"Description"}),(0,s.jsx)(r.th,{children:"What you should do"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"throw"})}),(0,s.jsx)(r.td,{children:"Always throws exceptions."}),(0,s.jsxs)(r.td,{children:["Use ",(0,s.jsx)(r.code,{children:"try/catch"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"hybrid"})}),(0,s.jsxs)(r.td,{children:["Logs expected errors (e.g. image not found), returns ",(0,s.jsx)(r.code,{children:"null"}),". Throws on unexpected internal errors. (default)"]}),(0,s.jsxs)(r.td,{children:["Optionally use ",(0,s.jsx)(r.a,{href:"/docs/api-reference/shared-module#getlastpixstoreerror",children:(0,s.jsx)(r.code,{children:"getLastPixstoreError()"})})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"warn"})}),(0,s.jsxs)(r.td,{children:["Logs all errors, always returns ",(0,s.jsx)(r.code,{children:"null"}),"."]}),(0,s.jsx)(r.td,{children:"Useful for debugging silently."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"silent"})}),(0,s.jsxs)(r.td,{children:["Ignores all errors silently, always returns ",(0,s.jsx)(r.code,{children:"null"}),"."]}),(0,s.jsx)(r.td,{children:"Use in production fallback flows."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"custom"})}),(0,s.jsxs)(r.td,{children:["Forwards all errors to your handler via ",(0,s.jsx)(r.a,{href:"/docs/api-reference/shared-module#setcustomerrorhandler",children:(0,s.jsx)(r.code,{children:"setCustomErrorHandler()"})}),"."]}),(0,s.jsxs)(r.td,{children:["You ",(0,s.jsx)(r.strong,{children:"must"})," define a handler."]})]})]})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.h2,{id:"example-1-throw-mode-with-trycatch",children:["Example 1: ",(0,s.jsx)(r.code,{children:"throw"})," mode with try/catch"]}),"\n",(0,s.jsxs)(r.p,{children:["This is the most strict mode. Pixstore will throw errors immediately.\nYou must use ",(0,s.jsx)(r.code,{children:"try/catch"})," to handle failures."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"initPixstoreFrontend({\n  errorHandlingMode: 'throw',\n})\n\ntry {\n  const blob = await getImage(imageRecord)\n  // Use the image\n} catch (error) {\n  console.error('Image fetch failed:', error)\n}\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.h2,{id:"example-2-hybrid-mode-with-getlastpixstoreerror",children:["Example 2: ",(0,s.jsx)(r.code,{children:"hybrid"})," mode with getLastPixstoreError()"]}),"\n",(0,s.jsxs)(r.p,{children:["This is the ",(0,s.jsx)(r.strong,{children:"default"})," mode. Expected errors return ",(0,s.jsx)(r.code,{children:"null"}),", but you can inspect the cause using ",(0,s.jsx)(r.a,{href:"/docs/api-reference/shared-module#getlastpixstoreerror",children:(0,s.jsx)(r.code,{children:"getLastPixstoreError()"})}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"initPixstoreFrontend({\n  errorHandlingMode: 'hybrid',\n})\n\nconst blob = await getImage(imageRecord)\n\nif (!blob) {\n  const err = getLastPixstoreError()\n  console.warn('Could not load image:', err?.message)\n}\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.h2,{id:"example-3-custom-mode-with-a-custom-handler",children:["Example 3: ",(0,s.jsx)(r.code,{children:"custom"})," mode with a custom handler"]}),"\n",(0,s.jsxs)(r.p,{children:["In ",(0,s.jsx)(r.code,{children:"custom"})," mode, Pixstore calls your error handler for every error.\nYou have full control, but you ",(0,s.jsx)(r.strong,{children:"must"})," register a handler via ",(0,s.jsx)(r.a,{href:"/docs/api-reference/shared-module#setcustomerrorhandler",children:(0,s.jsx)(r.code,{children:"setCustomErrorHandler()"})}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"initPixstoreFrontend({\n  errorHandlingMode: 'custom',\n})\n\nsetCustomErrorHandler((err) => {\n  if (err.name === 'PixstoreError') {\n    console.warn('Handled expected error:', err.message)\n  } else {\n    throw err // Or forward to monitoring tools\n  }\n})\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["For most applications, the default ",(0,s.jsx)(r.code,{children:"'hybrid'"})," mode is a good balance between usability and debuggability."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>i});var o=n(6540);const s={},t=o.createContext(s);function d(e){const r=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);