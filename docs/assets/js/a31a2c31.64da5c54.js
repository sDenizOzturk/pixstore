"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[516],{4131:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"usage/cache-cleanup","title":"Automatic Cache Cleanup","description":"Pixstore automatically manages image cache in the browser using IndexedDB.","source":"@site/docs/usage/cache-cleanup.md","sourceDirName":"usage","slug":"/usage/cache-cleanup","permalink":"/pixstore/docs/usage/cache-cleanup","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/pixstore/tree/main/docusaurus/docs/usage/cache-cleanup.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"cache-cleanup","title":"Automatic Cache Cleanup","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Custom Endpoint & Fetcher","permalink":"/pixstore/docs/usage/custom-endpoint"},"next":{"title":"Error Handling","permalink":"/pixstore/docs/usage/error-handling"}}');var t=s(4848),o=s(8453);const a={id:"cache-cleanup",title:"Automatic Cache Cleanup",sidebar_position:7},r=void 0,c={},l=[{value:"How it works",id:"how-it-works",level:2},{value:"Configuration options",id:"configuration-options",level:2},{value:"Manual deletion",id:"manual-deletion",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Pixstore automatically manages image cache in the browser using ",(0,t.jsx)(n.strong,{children:"IndexedDB"}),".",(0,t.jsx)(n.br,{}),"\n","This includes cleanup of old or unused images to stay within your configured cache limits."]}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Every cached image includes a ",(0,t.jsx)(n.code,{children:"lastUsed"})," timestamp."]}),"\n",(0,t.jsxs)(n.li,{children:["When ",(0,t.jsx)(n.code,{children:"getImage()"})," is called, Pixstore checks how many images exist in the cache."]}),"\n",(0,t.jsxs)(n.li,{children:["If the number exceeds the limit, it automatically deletes the ",(0,t.jsx)(n.strong,{children:"least recently used"})," images."]}),"\n",(0,t.jsxs)(n.li,{children:["The cleanup happens ",(0,t.jsx)(n.strong,{children:"in the background"})," and does not block image rendering."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You do not need to run any manual cleanup logic in your app."}),"\n",(0,t.jsx)(n.h2,{id:"configuration-options",children:"Configuration options"}),"\n",(0,t.jsxs)(n.p,{children:["You can control cache size and cleanup behavior via ",(0,t.jsx)(n.a,{href:"/docs/api-reference/types#pixstorefrontendconfig",children:(0,t.jsx)(n.code,{children:"initPixstoreFrontend"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"initPixstoreFrontend({\n  frontendImageCacheLimit: 300, // Max number of images to keep (default: 1000)\n  frontendCleanupBatch: 50, // How many images to delete when limit is exceeded (default: 50)\n})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"frontendImageCacheLimit"})}),": sets the maximum number of cached images."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"frontendCleanupBatch"})}),": defines how many old records to delete when the limit is exceeded."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Pixstore will always delete the ",(0,t.jsxs)(n.strong,{children:["oldest ",(0,t.jsx)(n.code,{children:"lastUsed"})," images first"]}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"manual-deletion",children:"Manual deletion"}),"\n",(0,t.jsx)(n.p,{children:"You can delete a specific cached image manually using its ID.\nThis can be useful, for example, on logout or when you know a certain image is no longer needed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { deleteCachedImage } from 'pixstore/frontend'\n\n// Delete a single cached image by ID\nawait deleteCachedImage('students:abc123')\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only decrypted images are stored in IndexedDB."}),"\n",(0,t.jsxs)(n.li,{children:["Pixstore ",(0,t.jsx)(n.strong,{children:"never stores keys, proofs, or sensitive data"})," in the browser."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var i=s(6540);const t={},o=i.createContext(t);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);