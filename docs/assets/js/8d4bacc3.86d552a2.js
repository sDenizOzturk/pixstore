"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[523],{2883:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"reference/types","title":"Types","description":"This page documents the shared type definitions used across Pixstore frontend and backend.","source":"@site/docs/reference/types.md","sourceDirName":"reference","slug":"/reference/types","permalink":"/pixstore/docs/reference/types","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/pixstore/tree/main/docusaurus/docs/reference/types.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"types","title":"Types","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Shared Modules","permalink":"/pixstore/docs/reference/shared"}}');var i=r(4848),s=r(8453);r(3141);const t={id:"types",title:"Types",sidebar_position:4},c=void 0,o={},l=[{value:"<code>ImageRecord</code>",id:"imagerecord",level:2},{value:"Definition",id:"definition",level:3},{value:"Fields",id:"fields",level:3},{value:"<code>ImageDecryptionMeta</code>",id:"imagedecryptionmeta",level:2},{value:"Definition",id:"definition-1",level:3},{value:"Fields",id:"fields-1",level:3},{value:"<code>PixstoreBackendConfig</code>",id:"pixstorebackendconfig",level:2},{value:"Definition",id:"definition-2",level:3},{value:"Fields",id:"fields-2",level:3},{value:"<code>PixstoreFrontendConfig</code>",id:"pixstorefrontendconfig",level:2},{value:"Definition",id:"definition-3",level:3},{value:"Fields",id:"fields-3",level:3},{value:"<code>ErrorHandlingMode</code>",id:"errorhandlingmode",level:2},{value:"Definition",id:"definition-4",level:3},{value:"Fields",id:"fields-4",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This page documents the shared type definitions used across Pixstore frontend and backend."}),"\n",(0,i.jsx)(n.p,{children:"Some types on this page are internal and not exported."}),"\n",(0,i.jsxs)(n.p,{children:["All exported types can be imported from the ",(0,i.jsx)(n.code,{children:"pixstore/types"})," entrypoint:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import type { ImageRecord } from 'pixstore/types'\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"exported-types",children:"Exported Types"}),"\n",(0,i.jsx)(n.h2,{id:"imagerecord",children:(0,i.jsx)(n.code,{children:"ImageRecord"})}),"\n",(0,i.jsx)(n.p,{children:"Represents a reference to an image stored in Pixstore, including the ID, access token, and decryption metadata."}),"\n",(0,i.jsx)(n.p,{children:"Used to fetch and decrypt images on the frontend."}),"\n",(0,i.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ImageRecord {\n  id: string\n  token: number\n  meta: ImageDecryptionMeta\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fields",children:"Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Unique identifier of the image"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"token"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:"Used for cache validation and versioning"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"meta"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#imagedecryptionmeta",children:(0,i.jsx)(n.code,{children:"ImageDecryptionMeta"})})}),(0,i.jsx)(n.td,{children:"Decryption metadata: key, IV, tag, format, etc."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc4 Source: ",(0,i.jsx)(n.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/types/image-record.ts",children:(0,i.jsx)(n.code,{children:"src/types/image-record.ts"})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"internal-types",children:"Internal Types"}),"\n",(0,i.jsx)(n.h2,{id:"imagedecryptionmeta",children:(0,i.jsx)(n.code,{children:"ImageDecryptionMeta"})}),"\n",(0,i.jsx)(n.p,{children:"Metadata required to decrypt an encrypted image in Pixstore."}),"\n",(0,i.jsxs)(n.p,{children:["This object is used internally and included as part of each ",(0,i.jsx)(n.code,{children:"ImageRecord"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"definition-1",children:"Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ImageDecryptionMeta {\n  key: string // Base64-encoded AES-GCM encryption key\n  iv: string // Initialization vector (IV) for AES-GCM, base64-encoded\n  tag: string // Authentication tag for AES-GCM, base64-encoded\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fields-1",children:"Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"key"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Base64-encoded AES-GCM encryption key"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"iv"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Base64-encoded initialization vector (IV)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tag"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Base64-encoded authentication tag"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc4 Source: ",(0,i.jsx)(n.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/types/image-record.ts",children:(0,i.jsx)(n.code,{children:"src/types/image-record.ts"})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pixstorebackendconfig",children:(0,i.jsx)(n.code,{children:"PixstoreBackendConfig"})}),"\n",(0,i.jsx)(n.p,{children:"Configuration object for customizing Pixstore\u2019s backend storage, server, and error handling."}),"\n",(0,i.jsxs)(n.p,{children:["All fields are optional; any missing values are filled using Pixstore\u2019s internal ",(0,i.jsx)(n.code,{children:"defaultConfig"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"definition-2",children:"Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface PixstoreBackendConfig {\n  imageFormats: readonly ImageFormat[]\n  imageRootDir: string\n  databasePath: string\n  defaultEndpointEnabled: boolean\n  defaultEndpointListenHost: string\n  defaultEndpointListenPort: number\n  defaultEndpointRoute: string\n  accessControlAllowOrigin: string\n  errorHandlingMode: ErrorHandlingMode\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fields-2",children:"Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default (non-test)"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"imageFormats"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ImageFormat[]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"['png', 'jpeg', 'webp']"})}),(0,i.jsx)(n.td,{children:"Allowed image formats"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"imageRootDir"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'pixstore-images'"})}),(0,i.jsx)(n.td,{children:"Folder where images are saved"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"databasePath"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'./.pixstore.sqlite'"})}),(0,i.jsx)(n.td,{children:"Path to SQLite metadata DB"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultEndpointEnabled"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"true"})}),(0,i.jsx)(n.td,{children:"Whether to expose the default GET image endpoint"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultEndpointRoute"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'/pixstore-image'"})}),(0,i.jsx)(n.td,{children:"Route path for the default image endpoint"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultEndpointListenHost"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'0.0.0.0'"})}),(0,i.jsx)(n.td,{children:"Host/IP where the image endpoint HTTP server listens"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultEndpointListenPort"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"3001"})}),(0,i.jsx)(n.td,{children:"Port where the image endpoint HTTP server listens"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"accessControlAllowOrigin"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'*'"})}),(0,i.jsxs)(n.td,{children:["CORS ",(0,i.jsx)(n.code,{children:"Access-Control-Allow-Origin"})," header for the default route"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"errorHandlingMode"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#errorhandlingmode",children:(0,i.jsx)(n.code,{children:"ErrorHandlingMode"})})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'hybrid'"})}),(0,i.jsx)(n.td,{children:"Error handling strategy for Pixstore API calls."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2139\ufe0f When running in test mode (",(0,i.jsx)(n.code,{children:"IS_TEST === true"}),"), values like paths and ports are automatically randomized or sandboxed."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc4 Source: ",(0,i.jsx)(n.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/types/pixstore-config.ts",children:(0,i.jsx)(n.code,{children:"src/types/pixstore-config.ts"})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pixstorefrontendconfig",children:(0,i.jsx)(n.code,{children:"PixstoreFrontendConfig"})}),"\n",(0,i.jsx)(n.p,{children:"Configuration object for customizing Pixstore\u2019s frontend image caching, database, and endpoint connection."}),"\n",(0,i.jsxs)(n.p,{children:["All fields are optional; any missing values are filled using Pixstore\u2019s internal ",(0,i.jsx)(n.code,{children:"defaultConfig"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"definition-3",children:"Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface PixstoreFrontendConfig {\n  imageFormats: readonly ImageFormat[]\n  frontendDbName: string\n  frontendDbVersion: number\n  imageStoreName: string\n  frontendImageCacheLimit: number\n  frontendCleanupBatch: number\n  defaultEndpointConnectHost: string\n  defaultEndpointConnectPort: number\n  defaultEndpointRoute: string\n  errorHandlingMode: ErrorHandlingMode\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fields-3",children:"Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default (non-test)"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"imageFormats"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ImageFormat[]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"['png', 'jpeg', 'webp']"})}),(0,i.jsx)(n.td,{children:"Allowed image formats"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"frontendDbName"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'pixstore'"})}),(0,i.jsx)(n.td,{children:"IndexedDB database name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"frontendDbVersion"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})}),(0,i.jsx)(n.td,{children:"IndexedDB schema version"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"imageStoreName"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'images'"})}),(0,i.jsx)(n.td,{children:"Object store name for image records"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"frontendImageCacheLimit"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1000"})}),(0,i.jsx)(n.td,{children:"Maximum number of images to keep in the local cache"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"frontendCleanupBatch"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"50"})}),(0,i.jsx)(n.td,{children:"Number of items to remove per cleanup cycle when limit is exceeded"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultEndpointConnectHost"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'unknown'"})}),(0,i.jsx)(n.td,{children:"Host to contact for image fetching (used if no custom fetcher is provided)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultEndpointConnectPort"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"3001"})}),(0,i.jsx)(n.td,{children:"Port to contact for image fetching"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultEndpointRoute"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'/pixstore-image'"})}),(0,i.jsx)(n.td,{children:"Route to contact for image fetching"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"errorHandlingMode"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#errorhandlingmode",children:(0,i.jsx)(n.code,{children:"ErrorHandlingMode"})})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'hybrid'"})}),(0,i.jsx)(n.td,{children:"Error handling strategy for Pixstore API calls."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2139\ufe0f In test mode (",(0,i.jsx)(n.code,{children:"IS_TEST === true"}),"), database names and limits are automatically sandboxed."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc4 Source: ",(0,i.jsx)(n.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/types/pixstore-config.ts",children:(0,i.jsx)(n.code,{children:"src/types/pixstore-config.ts"})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"errorhandlingmode",children:(0,i.jsx)(n.code,{children:"ErrorHandlingMode"})}),"\n",(0,i.jsx)(n.p,{children:"Enumerates the possible error handling strategies for Pixstore API calls."}),"\n",(0,i.jsx)(n.p,{children:"Used in Pixstore configuration to control error propagation and reporting across all modules."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," This type is internal and not exported. It cannot be imported directly."]}),"\n",(0,i.jsx)(n.h3,{id:"definition-4",children:"Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type ErrorHandlingMode =\n  | 'hybrid'\n  | 'throw'\n  | 'warn'\n  | 'silent'\n  | 'custom'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fields-4",children:"Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"hybrid"})}),(0,i.jsxs)(n.td,{children:["Logs and returns ",(0,i.jsx)(n.code,{children:"null"})," for ",(0,i.jsx)(n.code,{children:"PixstoreError"})," (expected errors); throws all other errors.(default)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"throw"})}),(0,i.jsx)(n.td,{children:"Throws all errors (default in test environments)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"warn"})}),(0,i.jsxs)(n.td,{children:["Logs any error and returns ",(0,i.jsx)(n.code,{children:"null"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"silent"})}),(0,i.jsxs)(n.td,{children:["Ignores any error and returns ",(0,i.jsx)(n.code,{children:"null"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"custom"})}),(0,i.jsx)(n.td,{children:"Calls a user-provided error handler; all error logic must be handled in your handler."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc4 Source: ",(0,i.jsx)(n.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/types/error-handling-mode.ts",children:(0,i.jsx)(n.code,{children:"src/types/error-handling-mode.ts"})})]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc4 Source: ",(0,i.jsx)(n.a,{href:"https://github.com/sDenizOzturk/pixstore/blob/main/src/shared/handle-error.ts",children:(0,i.jsx)(n.code,{children:"src/shared/handle-error.ts"})})]})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},3141:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var d=r(4848);const i=()=>(0,d.jsxs)("div",{style:{backgroundColor:"#fff4e5",padding:"1em",borderLeft:"4px solid #f5a623",marginBottom:"1em",borderRadius:"4px",fontSize:"0.8em",lineHeight:"1.4",color:"#333"},children:[(0,d.jsx)("strong",{children:"\u26a0\ufe0f This section shows internal implementation details."}),(0,d.jsx)("br",{}),"It is intended for contributors or users who want to understand the inner workings of Pixstore.",(0,d.jsx)("br",{}),"Typical users do not need to modify or interact with this code directly."]})},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var d=r(6540);const i={},s=d.createContext(i);function t(e){const n=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),d.createElement(s.Provider,{value:n},e.children)}}}]);